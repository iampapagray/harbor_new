{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventSystem = void 0;\n/**\n * An array of all instanciated Event Systems.\n */\n\nvar eventSystems = new Array();\n/**\n * Dispatches an event that has been registered to all event systems.\n * @global\n * @param {string} eventName the event's name\n * @param {any} parameters the event's parameters\n * @example window.dispatchReactUnityEvent(\"gameOver\", 180);\n */\n\nvar dispatchReactUnityEvent = function dispatchReactUnityEvent(eventName) {\n  var parameters = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    parameters[_i - 1] = arguments[_i];\n  } // This made should be made available to the global scope. When invoked, it\n  // will dispatch the given event to all event systems.\n\n\n  for (var _a = 0, eventSystems_1 = eventSystems; _a < eventSystems_1.length; _a++) {\n    var eventSystem = eventSystems_1[_a];\n\n    if (typeof eventSystem !== \"undefined\") {\n      eventSystem.dispatchEvent.apply(eventSystem, __spreadArray([eventName], parameters, false));\n    }\n  }\n};\n/**\n * An event system.\n */\n\n\nvar EventSystem =\n/** @class */\nfunction () {\n  function EventSystem() {\n    /**\n     * The event map contains all the events that have been registered to the\n     * event system as a key-value pair of event name and event listener.\n     * @private\n     * @readonly\n     */\n    this.eventMap = new Map(); // The event system will be pushed to the global list of event system\n    // instances.\n\n    eventSystems.push(this); // If we're running inside of a browser environment, some global properties\n    // will be made available on the window allowing for Unity to communicate.\n\n    if (typeof window !== \"undefined\") {\n      // Register the global dispatch method.\n      if (typeof window.dispatchReactUnityEvent === \"undefined\") {\n        window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n      } // Create object for legacy bindings on the window.\n\n\n      if (typeof window.ReactUnityWebGL === \"undefined\") {\n        window.ReactUnityWebGL = {};\n      }\n    }\n  }\n  /**\n   * Registers an event to the system.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {Function} eventListener the event's function\n   */\n\n\n  EventSystem.prototype.on = function (eventName, eventListener) {\n    // Adds the event to the event map.\n    this.eventMap.set(eventName, eventListener); // Add legacy binding to the window.\n\n    if (typeof window !== \"undefined\") {\n      window.ReactUnityWebGL[eventName] = function () {\n        var parameters = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          parameters[_i] = arguments[_i];\n        }\n\n        return eventListener.apply(void 0, parameters);\n      };\n    }\n  };\n  /**\n   * Removes all the Event Listeners with a specific Event Name.\n   * @public\n   * @param {string} eventName the event's name\n   * @example unityContext.removeEventListener(\"progress\");\n   */\n\n\n  EventSystem.prototype.removeEventListener = function (eventName) {\n    // Remove the event from the event map.\n    this.eventMap.delete(eventName); // Remove legacy binding from the window.\n\n    if (typeof window !== \"undefined\") {\n      delete window.ReactUnityWebGL[eventName];\n    }\n  };\n  /**\n   * Removes all the Event Listeners.\n   * @public\n   * @example unityContext.removeAllEventListeners();\n   */\n\n\n  EventSystem.prototype.removeAllEventListeners = function () {\n    // Remove legacy bindings from the window.\n    if (typeof window !== \"undefined\") {\n      this.eventMap.forEach(function (_value, key) {\n        delete window.ReactUnityWebGL[key];\n      });\n    } // Clear the event map.\n\n\n    this.eventMap.clear();\n  };\n  /**\n   * Dispatches an event that has been registered to the event system.\n   * @public\n   * @param {string} eventName the event's name\n   * @param {any} parameters the event's parameters\n   * @example unityContext.dispatchEventListener(\"gameOver\", 180);\n   */\n\n\n  EventSystem.prototype.dispatchEvent = function (eventName) {\n    var parameters = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      parameters[_i - 1] = arguments[_i];\n    }\n\n    var event = this.eventMap.get(eventName);\n\n    if (typeof event !== \"undefined\") {\n      event.apply(void 0, parameters);\n    }\n  };\n\n  return EventSystem;\n}();\n\nexports.EventSystem = EventSystem;","map":{"version":3,"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","Object","defineProperty","exports","value","EventSystem","eventSystems","dispatchReactUnityEvent","eventName","parameters","_i","_a","eventSystems_1","eventSystem","dispatchEvent","apply","eventMap","Map","push","window","ReactUnityWebGL","on","eventListener","set","removeEventListener","delete","removeAllEventListeners","forEach","_value","key","clear","event","get"],"sources":["/Users/magmar/dev/harborsite/harborapp/node_modules/react-unity-webgl/distribution/library/event-system.js"],"sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventSystem = void 0;\n/**\n * An array of all instanciated Event Systems.\n */\nvar eventSystems = new Array();\n/**\n * Dispatches an event that has been registered to all event systems.\n * @global\n * @param {string} eventName the event's name\n * @param {any} parameters the event's parameters\n * @example window.dispatchReactUnityEvent(\"gameOver\", 180);\n */\nvar dispatchReactUnityEvent = function (eventName) {\n    var parameters = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        parameters[_i - 1] = arguments[_i];\n    }\n    // This made should be made available to the global scope. When invoked, it\n    // will dispatch the given event to all event systems.\n    for (var _a = 0, eventSystems_1 = eventSystems; _a < eventSystems_1.length; _a++) {\n        var eventSystem = eventSystems_1[_a];\n        if (typeof eventSystem !== \"undefined\") {\n            eventSystem.dispatchEvent.apply(eventSystem, __spreadArray([eventName], parameters, false));\n        }\n    }\n};\n/**\n * An event system.\n */\nvar EventSystem = /** @class */ (function () {\n    function EventSystem() {\n        /**\n         * The event map contains all the events that have been registered to the\n         * event system as a key-value pair of event name and event listener.\n         * @private\n         * @readonly\n         */\n        this.eventMap = new Map();\n        // The event system will be pushed to the global list of event system\n        // instances.\n        eventSystems.push(this);\n        // If we're running inside of a browser environment, some global properties\n        // will be made available on the window allowing for Unity to communicate.\n        if (typeof window !== \"undefined\") {\n            // Register the global dispatch method.\n            if (typeof window.dispatchReactUnityEvent === \"undefined\") {\n                window.dispatchReactUnityEvent = dispatchReactUnityEvent;\n            }\n            // Create object for legacy bindings on the window.\n            if (typeof window.ReactUnityWebGL === \"undefined\") {\n                window.ReactUnityWebGL = {};\n            }\n        }\n    }\n    /**\n     * Registers an event to the system.\n     * @public\n     * @param {string} eventName the event's name\n     * @param {Function} eventListener the event's function\n     */\n    EventSystem.prototype.on = function (eventName, eventListener) {\n        // Adds the event to the event map.\n        this.eventMap.set(eventName, eventListener);\n        // Add legacy binding to the window.\n        if (typeof window !== \"undefined\") {\n            window.ReactUnityWebGL[eventName] = function () {\n                var parameters = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    parameters[_i] = arguments[_i];\n                }\n                return eventListener.apply(void 0, parameters);\n            };\n        }\n    };\n    /**\n     * Removes all the Event Listeners with a specific Event Name.\n     * @public\n     * @param {string} eventName the event's name\n     * @example unityContext.removeEventListener(\"progress\");\n     */\n    EventSystem.prototype.removeEventListener = function (eventName) {\n        // Remove the event from the event map.\n        this.eventMap.delete(eventName);\n        // Remove legacy binding from the window.\n        if (typeof window !== \"undefined\") {\n            delete window.ReactUnityWebGL[eventName];\n        }\n    };\n    /**\n     * Removes all the Event Listeners.\n     * @public\n     * @example unityContext.removeAllEventListeners();\n     */\n    EventSystem.prototype.removeAllEventListeners = function () {\n        // Remove legacy bindings from the window.\n        if (typeof window !== \"undefined\") {\n            this.eventMap.forEach(function (_value, key) {\n                delete window.ReactUnityWebGL[key];\n            });\n        }\n        // Clear the event map.\n        this.eventMap.clear();\n    };\n    /**\n     * Dispatches an event that has been registered to the event system.\n     * @public\n     * @param {string} eventName the event's name\n     * @param {any} parameters the event's parameters\n     * @example unityContext.dispatchEventListener(\"gameOver\", 180);\n     */\n    EventSystem.prototype.dispatchEvent = function (eventName) {\n        var parameters = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parameters[_i - 1] = arguments[_i];\n        }\n        var event = this.eventMap.get(eventName);\n        if (typeof event !== \"undefined\") {\n            event.apply(void 0, parameters);\n        }\n    };\n    return EventSystem;\n}());\nexports.EventSystem = EventSystem;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}